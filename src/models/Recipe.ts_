import {
  RecipeDb,
  RecipesDb,
  MonthsDb,
  IngredientsDb,
  IdsDict,
} from '../db-types';
import { IdItemCollection } from './IdItemCollection';
import { Month } from './Month';
import { Ingredient } from './Ingredient';

export class Recipe {
  id: string;
  name: string;
  google_id: string;
  thumbnailLink: string;
  ingredients: IdsDict;
  months: IdsDict;

  constructor(
    id: string,
    recipesDb: RecipesDb,
    ingredientsDb: IngredientsDb,
    thumbnailLink: string
  ) {
    this.id = id;
    this.name = recipesDb[id].name;
    this.google_id = recipesDb[id].google_id;
    this.thumbnailLink = thumbnailLink;
    this.ingredients = recipesDb[id].ingredients || {};
    this.months = getRecipeMonths(id, recipesDb, ingredientsDb);
  }

  getDbRepr(): RecipeDb {
    const recipeDb: RecipeDb = {
      name: this.name,
      google_id: this.google_id,
      ingredients: {},
    };
    for (const ingredientId of this.ingredients.IdsAsArray()) {
      recipeDb.ingredients![ingredientId] = true;
    }

    return recipeDb;
  }

  getCopy(): Recipe {
    return new Recipe(
      this.id,
      this.recipesDb,
      this.thumbnailLink,
      this.allIngredients,
      this.allMonths
    );
  }

  isEqual(otherRecipe: Recipe): boolean {
    // No comparison of recipesDb
    // if (this.recipesDb !== otherRecipe.recipesDb) {
    //   return false;
    // }
    if (!this.allIngredients.hasSameIdsList(otherRecipe.allIngredients)) {
      return false;
    }
    if (!this.allMonths.hasSameIdsList(otherRecipe.allMonths)) {
      return false;
    }
    if (this.id !== otherRecipe.id) {
      return false;
    }
    if (this.name !== otherRecipe.name) {
      return false;
    }
    if (this.google_id !== otherRecipe.google_id) {
      return false;
    }
    // No comparison of thumbnailLink
    // if (this.thumbnailLink !== otherRecipe.thumbnailLink) {
    //   return false;
    // }
    if (!this.ingredients.hasSameIdsList(otherRecipe.ingredients)) {
      return false;
    }
    if (!this.months.hasSameIdsList(otherRecipe.months)) {
      return false;
    }
    return true;
  }

  static getRecipeMonths(
    recipeId: string,
    recipesDb: RecipesDb,
    ingredientsDb: IngredientsDb
  ) {
    const recipeMonths: string[] = [];
    for (const ingredientId in getRecipeIngredients(recipeId, recipesDb)) {
      const ingredientMonths = getIngredientMonths(ingredientId, ingredientsDb);
      for (const monthId in ingredientMonths) {
        if (recipeMonths.includes(monthId)) {
          recipeMonths.push(monthId);
        }
      }
    }
    return recipeMonths;
  }
}
